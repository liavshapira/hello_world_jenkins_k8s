// Revised Code
// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
            // Or, to avoid YAML:
            // containerTemplate {
            //     name 'shell'
            //     image 'ubuntu'
            //     command 'sleep'
            //     args 'infinity'
            // }
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: shell
    //image: ubuntu
    image: docker
    command:
    - sleep
    args:
    - infinity
'''
            // Can also wrap individual steps:
            // container('shell') {
            //     sh 'hostname'
            // }
            defaultContainer 'shell'
        }
    }

    stages {

        stage('TestHello') {
            steps {
                //sh 'hostname'
                echo "Hello from K8S"
            }
        }

        // Working accourding to flow from:
        // https://learn.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=linux&pivots=dotnet-8-0

        stage('InstallDotNet') {
            steps {
                sh 'apt-get update -y'
                sh 'apt-get install -y dotnet-sdk-8.0'
                sh 'apt-get install -y docker.io'
            }
        }
        
stage('CreateDotNetApp') {
    steps {
        sh 'mkdir docker-working && cd docker-working && dotnet new console -o App -n DotNet.Docker'

        script {
            def programContent = '''
var counter = 0;
var max = args.Length is not 0 ? Convert.ToInt32(args[0]) : -1;
while (max is -1 || counter < max) {
    Console.WriteLine($"Counter: {++counter}");
    await Task.Delay(TimeSpan.FromMilliseconds(1_000));
}
'''

            sh "echo '${programContent}' | tee -a docker-working/App/Program.cs"
        }
        // pwd and ls are used only for debug. 
        sh 'cd docker-working/App && pwd && ls -la && echo "going to publish the dotnet app" && dotnet publish -c Release'
    }
}

stage('ContainerizeApp') {
    steps {
        sh ''

        script {
            def dockerfileContent = '''
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env
WORKDIR /App

# Copy everything
COPY . ./
# Restore as distinct layers
RUN dotnet restore
# Build and publish a release
RUN dotnet publish -c Release -o out

# Build runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /App
COPY --from=build-env /App/out .
ENTRYPOINT ["dotnet", "DotNet.Docker.dll"]
}
'''

            sh "echo '${dockerfileContent}' | tee -a docker-working/App/Dockerfile"
        }
        // pwd and ls are used only for debug. 
        //sh 'cd docker-working/App && pwd && ls -la && echo "going to create an image" && docker create --name core-counter counter-image'
    }
}

        
        stage('Go2SleepSoIcanTest') {
            steps {
                echo "Going to sleep now. Good night"
                // use sleep for debug. If need to keep pod up. (when counter in dot net code is not used)
                // increase the sleep as needed.
                sleep 1000
            }
        }
        
    }
}
